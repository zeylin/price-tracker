/*
 * This file is generated by jOOQ.
 */
package com.zeylin.pricetracker.db.tables;


import com.zeylin.pricetracker.db.Keys;
import com.zeylin.pricetracker.db.Public;
import com.zeylin.pricetracker.db.tables.records.ItemRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Item extends TableImpl<ItemRecord> {

    private static final long serialVersionUID = -1993819786;

    /**
     * The reference instance of <code>public.item</code>
     */
    public static final Item ITEM = new Item();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ItemRecord> getRecordType() {
        return ItemRecord.class;
    }

    /**
     * The column <code>public.item.item_id</code>.
     */
    public final TableField<ItemRecord, Integer> ITEM_ID = createField(DSL.name("item_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.item.name</code>.
     */
    public final TableField<ItemRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.item.category_id</code>.
     */
    public final TableField<ItemRecord, Integer> CATEGORY_ID = createField(DSL.name("category_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.item</code> table reference
     */
    public Item() {
        this(DSL.name("item"), null);
    }

    /**
     * Create an aliased <code>public.item</code> table reference
     */
    public Item(String alias) {
        this(DSL.name(alias), ITEM);
    }

    /**
     * Create an aliased <code>public.item</code> table reference
     */
    public Item(Name alias) {
        this(alias, ITEM);
    }

    private Item(Name alias, Table<ItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private Item(Name alias, Table<ItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Item(Table<O> child, ForeignKey<O, ItemRecord> key) {
        super(child, key, ITEM);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ItemRecord> getPrimaryKey() {
        return Keys.ITEM_PKEY;
    }

    @Override
    public List<UniqueKey<ItemRecord>> getKeys() {
        return Arrays.<UniqueKey<ItemRecord>>asList(Keys.ITEM_PKEY, Keys.ITEM_NAME_KEY);
    }

    @Override
    public List<ForeignKey<ItemRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ItemRecord, ?>>asList(Keys.ITEM__ITEM_CATEGORY_ID_FKEY);
    }

    public Category category() {
        return new Category(this, Keys.ITEM__ITEM_CATEGORY_ID_FKEY);
    }

    @Override
    public Item as(String alias) {
        return new Item(DSL.name(alias), this);
    }

    @Override
    public Item as(Name alias) {
        return new Item(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Item rename(String name) {
        return new Item(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Item rename(Name name) {
        return new Item(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
