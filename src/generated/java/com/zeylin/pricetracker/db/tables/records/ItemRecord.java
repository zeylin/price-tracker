/*
 * This file is generated by jOOQ.
 */
package com.zeylin.pricetracker.db.tables.records;


import com.zeylin.pricetracker.db.tables.Item;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ItemRecord extends UpdatableRecordImpl<ItemRecord> implements Record3<Integer, String, Integer> {

    private static final long serialVersionUID = -993725082;

    /**
     * Setter for <code>public.item.item_id</code>.
     */
    public void setItemId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.item.item_id</code>.
     */
    public Integer getItemId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.item.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.item.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.item.category_id</code>.
     */
    public void setCategoryId(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.item.category_id</code>.
     */
    public Integer getCategoryId() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Item.ITEM.ITEM_ID;
    }

    @Override
    public Field<String> field2() {
        return Item.ITEM.NAME;
    }

    @Override
    public Field<Integer> field3() {
        return Item.ITEM.CATEGORY_ID;
    }

    @Override
    public Integer component1() {
        return getItemId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public Integer component3() {
        return getCategoryId();
    }

    @Override
    public Integer value1() {
        return getItemId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public Integer value3() {
        return getCategoryId();
    }

    @Override
    public ItemRecord value1(Integer value) {
        setItemId(value);
        return this;
    }

    @Override
    public ItemRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public ItemRecord value3(Integer value) {
        setCategoryId(value);
        return this;
    }

    @Override
    public ItemRecord values(Integer value1, String value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ItemRecord
     */
    public ItemRecord() {
        super(Item.ITEM);
    }

    /**
     * Create a detached, initialised ItemRecord
     */
    public ItemRecord(Integer itemId, String name, Integer categoryId) {
        super(Item.ITEM);

        set(0, itemId);
        set(1, name);
        set(2, categoryId);
    }
}
